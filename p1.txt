#pract 1

create database arpit;
use arpit

mysql> CREATE TABLE salesman(salesman_id INTEGER PRIMARY KEY,name TEXT,city TEXT,comission float);


mysql> INSERT INTO salesman VALUES (5001, 'James Hoog', 'New York', 0.15);

mysql> INSERT INTO salesman VALUES (5002, 'Nail Knite', 'Paris' ,0.13);

mysql> INSERT INTO salesman VALUES (5005, 'Pit Alex','London', 0.11);

mysql> INSERT INTO salesman VALUES (5006,  'Mc Lyon', 'Paris' ,0.14);

mysql> INSERT INTO salesman VALUES (5003,  'Lauson Hen', '' ,0.12);

mysql> INSERT INTO salesman VALUES (5007,  'Paul Adam', 'Rome' , 0.13);

mysql> select * from salesman;

+-------------+------------+----------+-----------+
| salesman_id | name       | city     | comission |
+-------------+------------+----------+-----------+
|        5001 | James Hoog | New York |      0.15 |
|        5002 | Nail Knite | Paris    |      0.13 |
|        5003 | Lauson Hen |          |      0.12 |
|        5005 | Pit Alex   | London   |      0.11 |
|        5006 | Mc Lyon    | Paris    |      0.14 |
|        5007 | Paul Adam  | Rome     |      0.13 |
+-------------+------------+----------+-----------+
6 rows in set (0.00 sec)


CREATE TABLE customer(customer_id int primary key,customer_name text,city text,grade int,salesman_id int,foreign key(salesman_id) references salesman(salesman_id));

mysql> INSERT INTO customer VALUES ( 3002, 'Nick Rimando' ,'New York',  100 ,5001);

mysql> INSERT INTO customer VALUES (3005, 'Graham Zusi', 'California' ,200 ,5002);


mysql> INSERT INTO customer VALUES (3001, 'Brad Guzan', 'London',null,null);

mysql> INSERT INTO customer VALUES (3004, 'Fabian Johnson' ,'Paris' , 300, 5006);


mysql> INSERT INTO customer VALUES (3007, 'Brad Davis',  'New York' , 200, 5001);


mysql> INSERT INTO customer VALUES (3009, 'Geoff Cameron', 'Berlin',  100, null);


mysql> INSERT INTO customer VALUES (3008 ,'Julian Green', 'London' , 300, 5002);


mysql> INSERT INTO customer VALUES (3003 ,'Jozy Altidor', 'Moscow', 200,  5007);


mysql> select * from customer;
+-------------+----------------+------------+-------+-------------+
| customer_id | customer_name  | city       | grade | salesman_id |
+-------------+----------------+------------+-------+-------------+
|        3001 | Brad Guzan     | London     |  NULL |        NULL |
|        3002 | Nick Rimando   | New York   |   100 |        5001 |
|        3003 | Jozy Altidor   | Moscow     |   200 |        5007 |
|        3004 | Fabian Johnson | Paris      |   300 |        5006 |
|        3005 | Graham Zusi    | California |   200 |        5002 |
|        3007 | Brad Davis     | New York   |   200 |        5001 |
|        3008 | Julian Green   | London     |   300 |        5002 |
|        3009 | Geoff Cameron  | Berlin     |   100 |        NULL |
+-------------+----------------+------------+-------+-------------+



CREATE TABLE orders (ord_no INTEGER PRIMARY KEY,purch_amt float,ord_date date,customer_id INTEGER,foreign key(customer_id) references customer(customer_id),salesman_id INTEGER,foreign key(salesman_id) references salesman(salesman_id));

mysql> INSERT INTO orders VALUES (70001, 150.5, '2012-10-05', 3005, 5002);


mysql> INSERT INTO orders VALUES (70009, 270.65, '2012-09-10', 3001, null);


mysql> INSERT INTO orders VALUES (70002, 65.26 ,'2012-10-05' ,3002, 5001);


mysql> INSERT INTO orders VALUES (70004, 110.5, '2012-08-17', 3009, null);


mysql> INSERT INTO orders VALUES (70007, 948.5, '2012-09-10', 3005, 5002);


mysql> INSERT INTO orders VALUES (70005, 2400.6, '2012-07-27', 3007, 5001);


mysql> INSERT INTO orders VALUES (70008, 5760, '2012-09-10', 3002, 5001);


mysql> INSERT INTO orders VALUES (70010, 1983.43, '2012-10-10', 3004, 5006);


mysql> INSERT INTO orders VALUES (70003, 2480.4, '2012-10-10', 3009, null);


mysql> INSERT INTO orders VALUES (70012, 250.45, '2012-06-27', 3008, 5002);


mysql> INSERT INTO orders VALUES (70011, 75.29, '2012-08-17', 3003, 5007);


mysql> select * from orders;
+--------+-----------+------------+-------------+-------------+
| ord_no | purch_amt | ord_date   | customer_id | salesman_id |
+--------+-----------+------------+-------------+-------------+
|  70001 |     150.5 | 2012-10-05 |        3005 |        5002 |
|  70002 |     65.26 | 2012-10-05 |        3002 |        5001 |
|  70003 |    2480.4 | 2012-10-10 |        3009 |        NULL |
|  70004 |     110.5 | 2012-08-17 |        3009 |        NULL |
|  70005 |    2400.6 | 2012-07-27 |        3007 |        5001 |
|  70007 |     948.5 | 2012-09-10 |        3005 |        5002 |
|  70008 |      5760 | 2012-09-10 |        3002 |        5001 |
|  70009 |    270.65 | 2012-09-10 |        3001 |        NULL |
|  70010 |   1983.43 | 2012-10-10 |        3004 |        5006 |
|  70011 |     75.29 | 2012-08-17 |        3003 |        5007 |
|  70012 |    250.45 | 2012-06-27 |        3008 |        5002 |
+--------+-----------+------------+-------------+-------------+
11 rows in set (0.00 sec)

Queries:-

1
1 )Display name and commission for all the salesmen

mysql> select name,comission from salesman;

+------------+-----------+
| name       | comission |
+------------+-----------+
| James Hoog |      0.15 |
| Nail Knite |      0.13 |
| Lauson Hen |      0.12 |
| Pit Alex   |      0.11 |
| Mc Lyon    |      0.14 |
| Paul Adam  |      0.13 |
+------------+-----------+

2)Retrieve salesman id of all salesmen from orders table without any repeats

mysql> select distinct salesman_id from salesman;
+-------------+
| salesman_id |
+-------------+
|        5001 |
|        5002 |
|        5003 |
|        5005 |
|        5006 |
|        5007 |
+-------------+
6 rows in set (0.00 sec)

3)Display names and city of salesman, who belongs to the city of Paris. 

mysql> select name,city from salesman where city='paris';
+------------+-------+
| name       | city  |
+------------+-------+
| Nail Knite | Paris |
| Mc Lyon    | Paris |
+------------+-------+
2 rows in set (0.00 sec)


4)Display all the information for those customers with a grade of 200


mysql> select * from customer where grade=200;
+-------------+---------------+------------+-------+-------------+
| customer_id | customer_name | city       | grade | salesman_id |
+-------------+---------------+------------+-------+-------------+
|        3003 | Jozy Altidor  | Moscow     |   200 |        5007 |
|        3005 | Graham Zusi   | California |   200 |        5002 |
|        3007 | Brad Davis    | New York   |   200 |        5001 |
+-------------+---------------+------------+-------+-------------+


5)Display the order number, order date and the purchase amount for order(s) which will be delivered by the salesman with ID 5001 

mysql> select ord_no,ord_date,purch_amt from orders where salesman_id=5001;
+--------+------------+-----------+
| ord_no | ord_date   | purch_amt |
+--------+------------+-----------+
|  70002 | 2012-10-05 |     65.26 |
|  70005 | 2012-07-27 |    2400.6 |
|  70008 | 2012-09-10 |      5760 |
+--------+------------+-----------+


6)Display all the customers, who are either belongs to the city New York or not had a grade above 100. 

mysql> select * from customer where city='New York' or not grade >100;
+-------------+---------------+----------+-------+-------------+
| customer_id | customer_name | city     | grade | salesman_id |
+-------------+---------------+----------+-------+-------------+
|        3002 | Nick Rimando  | New York |   100 |        5001 |
|        3007 | Brad Davis    | New York |   200 |        5001 |
|        3009 | Geoff Cameron | Berlin   |   100 |        NULL |
+-------------+---------------+----------+-------+-------------+


7)Find those salesmen with all information who gets the commission within a range of 0.12 and 0.14.

mysql> select salesman_id,name,city,comission from salesman where comission between 0.12 AND 0.14;
+-------------+------------+-------+-----------+
| salesman_id | name       | city  | comission |
+-------------+------------+-------+-----------+
|        5002 | Nail Knite | Paris |      0.13 |
|        5007 | Paul Adam  | Rome  |      0.13 |
+-------------+------------+-------+-----------+


8)Find all those customers with all information whose names are ending with the letter 'n'.

mysql> select * from customer where customer_name like '%n';
+-------------+----------------+--------+-------+-------------+
| customer_id | customer_name  | city   | grade | salesman_id |
+-------------+----------------+--------+-------+-------------+
|        3001 | Brad Guzan     | London |  NULL |        NULL |
|        3004 | Fabian Johnson | Paris  |   300 |        5006 |
|        3008 | Julian Green   | London |   300 |        5002 |
|        3009 | Geoff Cameron  | Berlin |   100 |        NULL |
+-------------+----------------+--------+-------+-------------+


9)Find those salesmen with all information whose name containing the 1st character is 'N' and the 4th character is 'l' and rests may be any character. 

mysql> select * from salesman where name like'N__l%';
+-------------+------------+-------+-----------+
| salesman_id | name       | city  | comission |
+-------------+------------+-------+-----------+
|        5002 | Nail Knite | Paris |      0.13 |
+-------------+------------+-------+-----------+


10)Find that customer with all information who does not get any grade except NULL. 

mysql> select * from customer where grade is null;
+-------------+---------------+--------+-------+-------------+
| customer_id | customer_name | city   | grade | salesman_id |
+-------------+---------------+--------+-------+-------------+
|        3001 | Brad Guzan    | London |  NULL |        NULL |
+-------------+---------------+--------+-------+-------------+


11)Find the total purchase amount of all orders

mysql> select sum(purch_amt) from orders;
+--------------------+
| sum(purch_amt)     |
+--------------------+
| 14495.580047607422 |
+--------------------+


12)Find the number of salesman currently listing for all of their customers

mysql> select count(salesman_id) from orders;
+--------------------+
| count(salesman_id) |
+--------------------+
|                  8 |
+--------------------+


mysql> select count(Distinct salesman_id) from orders;
+-----------------------------+
| count(Distinct salesman_id) |
+-----------------------------+
|                           4 |
+-----------------------------+

13)Find the highest grade for each of the cities of the customers.

mysql> select city,max(grade) from customer Group by city;
+------------+------------+
| city       | max(grade) |
+------------+------------+
| London     |        300 |
| New York   |        200 |
| Moscow     |        200 |
| Paris      |        300 |
| California |        200 |
| Berlin     |        100 |
+------------+------------+


14)Find the highest purchase amount ordered by each customer with their ID and highest purchase amount. 


mysql> select customer_id,max(purch_amt) from orders group by customer_id;

+-------------+----------------+

15)Find the highest purchase amount ordered by each customer on a particular date with their ID, order date and highest purchase amount. 


mysql> select customer_id,ord_date,max(purch_amt) from orders group by customer_id,ord_date;


16)Find the highest purchase amount on a date '2012-08-17' for each salesman with their ID. 

mysql> select salesman_id,max(purch_amt) from orders where ord_date='2012-08-17' group by salesman_id;

17)Find the highest purchase amount with their customer ID and order date, for only those customers who have the highest purchase amount in a day is more than 2000

mysql> select customer_id,ord_date,max(purch_amt) from orders group by customer_id,ord_date having max(purch_amt)>2000;


3 rows in set (0.00 sec)

18)Write a SQL statement that counts all orders for a date August 17th, 2012. 

mysql> select count(*) from orders where ord_date='2012-08-17';




#Practical 2


Q.1) Count the customers with grades above New York’s average.

select count(*) as Average_Count from customer where grade > (select avg(grade) from customer where city = "New York");


Q.2) Find the name and numbers of all salesmen who had more than one customer.

elect salesman_id,name from salesman a where 1<(select count(*) from
    customer where salesman_id=a.salesman_id);


Q.3) Demonstrate the DELETE operation by removing salesman with id 1000. All his orders must also be deleted
 ALTER TABLE orders
     ADD CONSTRAINT fk_salesman_id
     FOREIGN KEY (salesman_id)
     REFERENCES salesman(salesman_id)
     ON DELETE CASCADE;

DELETE FROM salesman where salesman_id = 5001;

Q.2. Execute the following Queries on it:


)List the titles of all movies directed by ‘Hitchcock’.
select mov_title from movies where dir_id =
(select dir_id from director where dir_name = 'HITCHCOCK') 

2)Find the movie names where one or more actors acted in two or more movies.
select m.mov_title
    from movies m
    natural join movie_cast mc
     where act_id in (select act_id
     from movie_cast
     group by act_id
     having count(act_id)>1)
     group by mov_title
     having count(*) > 1;

3)List all actors who acted in a movie before 2000 and also in a movie after 2020 (use JOIN operation).

select distinct act_name
from (actor join movie_cast using(act_id)) join movies using(mov_id)
where mov_year not between 2000 and 2015;

4)Find the title of movies and number of stars for each movie that has at least one rating and find the highest number of stars that movie received. Sort the result by movie title

select mov_title , max(rev_stars)
from movies natural join rating
group by mov_title
order by mov_title;

5) Update rating of all movies directed by ‘Steven Spielberg’ to 5.
update rating set rev_stars = 5
where mov_id in ( select mov_id 
from director natural join movies
where dir_name = 'STEVEN SPIELBERG'
 );

Q.3. Execute the following Queries on the given database
The Database has the following tables as below:
mysql> show tables;
+-----------------+
| Tables_in_prac2 |
+-----------------+
| advising        |
| courses         |
| grades          |
| instructors     |
| students        |
+-----------------+
5 rows in set (0.00 sec)

mysql> desc students;
+-------+--------------+------+-----+---------+-------+
| Field | Type         | Null | Key | Default | Extra |
+-------+--------------+------+-----+---------+-------+
| stno  | int          | NO   | PRI | NULL    |       |
| name  | varchar(50)  | YES  |     | NULL    |       |
| addr  | varchar(255) | YES  |     | NULL    |       |
| city  | varchar(50)  | YES  |     | NULL    |       |
| state | varchar(2)   | YES  |     | NULL    |       |
| zip   | varchar(10)  | YES  |     | NULL    |       |
+-------+--------------+------+-----+---------+-------+
6 rows in set (0.03 sec)

mysql> desc grades;
+-------+-------------+------+-----+---------+-------+
| Field | Type        | Null | Key | Default | Extra |
+-------+-------------+------+-----+---------+-------+
| stno  | int         | YES  | MUL | NULL    |       |
| empno | int         | YES  | MUL | NULL    |       |
| cno   | varchar(50) | YES  | MUL | NULL    |       |
| sem   | varchar(10) | YES  |     | NULL    |       |
| year  | int         | YES  |     | NULL    |       |
| grade | int         | YES  |     | NULL    |       |
+-------+-------------+------+-----+---------+-------+
6 rows in set (0.00 sec)

mysql> desc courses;
+-------+-------------+------+-----+---------+-------+
| Field | Type        | Null | Key | Default | Extra |
+-------+-------------+------+-----+---------+-------+
| cno   | varchar(50) | NO   | PRI | NULL    |       |
| cname | varchar(50) | YES  |     | NULL    |       |
| cr    | int         | YES  |     | NULL    |       |
| cap   | int         | YES  |     | NULL    |       |
+-------+-------------+------+-----+---------+-------+
4 rows in set (0.00 sec)

mysql> desc instructors;
+--------+-------------+------+-----+---------+-------+
| Field  | Type        | Null | Key | Default | Extra |
+--------+-------------+------+-----+---------+-------+
| empno  | int         | NO   | PRI | NULL    |       |
| name   | varchar(50) | YES  |     | NULL    |       |
| ranks  | varchar(20) | YES  |     | NULL    |       |
| roomno | varchar(10) | YES  |     | NULL    |       |
| telno  | varchar(15) | YES  |     | NULL    |       |
+--------+-------------+------+-----+---------+-------+
5 rows in set (0.00 sec)

mysql> desc advising;
+-------+------+------+-----+---------+-------+
| Field | Type | Null | Key | Default | Extra |
+-------+------+------+-----+---------+-------+
| stno  | int  | NO   | PRI | NULL    |       |
| empno | int  | NO   | PRI | NULL    |       |
+-------+------+------+-----+---------+-------+
2 rows in set (0.00 sec)
1) Find the names of students who took some four-credit courses.
mysql> SELECT DISTINCT s.name
    -> FROM students s
    -> JOIN grades g ON s.stno = g.stno
    -> JOIN courses c ON g.cno = c.cno
    -> WHERE c.cr = 4;
+------------------+
| name             |
+------------------+
| edwards p. david |
| Mixon Leatha     |
| Pierce Richard   |
| Rawlings Jerry   |
| Prior Lorraine   |
| Lewis Jerry      |
+------------------+
6 rows in set (0.01 sec)
2) Find the names of students who took every four-credit course.
mysql> SELECT s.name FROM students s
    -> WHERE NOT EXISTS (
    ->     SELECT c.cno FROM courses c
    ->     WHERE c.cr = 4
    ->          AND NOT EXISTS (
    ->         SELECT * FROM grades g
    ->         WHERE g.stno = s.stno
    ->         AND g.cno = c.cno
    ->     )
    -> );
+------------------+
| name             |
+------------------+
| edwards p. david |
| Mixon Leatha     |
| Pierce Richard   |
| Prior Lorraine   |
+------------------+
4 rows in set (0.00 sec)
4) Find the names of students who took cs210 and cs310.
mysql> SELECT DISTINCT s.name
    -> FROM students s
    -> JOIN grades g ON s.stno = g.stno
    -> WHERE g.cno IN ('cs210', 'cs310');
+------------------+
| name             |
+------------------+
| edwards p. david |
| Mixon Leatha     |
| Pierce Richard   |
| Prior Lorraine   |
| Lewis Jerry      |
+------------------+
5 rows in set (0.00 sec)
5) Find the names of all students whose advisor is not a full professor.
mysql> SELECT DISTINCT s.name
    -> FROM students s
    -> JOIN advising a ON s.stno = a.stno
    -> JOIN instructors i ON a.empno = i.empno
    -> WHERE i.ranks != 'Full Professor';
+------------------+
| name             |
+------------------+
| edwards p. david |
| Grogan A. Mary   |
| Mixon Leatha     |
| McLane Sandy     |
| Rawlings Jerry   |
| Novak Roland     |
| Pierce Richard   |
| Prior Lorraine   |
| Lewis Jerry      |
+------------------+
9 rows in set (0.00 sec)
7) Find course numbers for courses that enroll exactly two students;
mysql> SELECT g.cno
    -> FROM grades g
    -> GROUP BY g.cno
    -> HAVING COUNT(g.stno) = 2;
+-------+
| cno   |
+-------+
| cs310 |
| cs410 |
+-------+
2 rows in set (0.00 sec)
8) Find the names of all students for whom no other student lives in the same city.
mysql> SELECT DISTINCT s.name
    -> FROM students s
    -> WHERE NOT EXISTS (
    ->     SELECT *
    ->     FROM students s2
    ->     WHERE s2.city = s.city AND s2.stno != s.stno
    -> );
+------------------+
| name             |
+------------------+
| edwards p. david |
| Grogan A. Mary   |
| Novak Roland     |
| Lewis Jerry      |
+------------------+
4 rows in set (0.01 sec)
10) Find the telephone numbers of instructors who teach a course taken by any student who lives in Boston.
mysql> SELECT DISTINCT i.telno
    -> FROM instructors i
    -> JOIN grades g ON i.empno = g.empno
    -> JOIN students s ON g.stno = s.stno
    -> WHERE s.city = 'Boston';
+-------+
| telno |
+-------+
| 9101  |
| 7122  |
| 5110  |
| 7024  |
+-------+
4 rows in set (0.00 sec)
12) Find the names of students who took only one course.
mysql> SELECT s.name
    -> FROM students s
    -> JOIN (
    ->     SELECT stno, COUNT(*) AS course_count
    ->     FROM grades
    ->     GROUP BY stno
    -> ) AS student_courses ON s.stno = student_courses.stno
    -> WHERE student_courses.course_count = 1;
+----------------+
| name           |
+----------------+
| Grogan A. Mary |
| Novak Roland   |
+----------------+
2 rows in set (0.00 sec)
13) Find the names of instructors who teach no course.
mysql> SELECT i.name
    -> FROM instructors i
    -> LEFT JOIN grades g ON i.empno = g.empno
    -> WHERE g.empno IS NULL;
+---------------+
| name          |
+---------------+
| Davis William |
+---------------+
1 row in set (0.00 sec)
14) Find the names of the instructors who taught only one course during the spring semester of 2001.
mysql> SELECT i.name
    -> FROM instructors i
    -> JOIN (
    ->     SELECT empno, COUNT(*) AS course_count
    ->     FROM grades
    ->     WHERE sem = 'spring' AND year = 2001
    ->     GROUP BY empno
    -> ) AS instructor_courses ON i.empno = instructor_courses.empno
    -> WHERE instructor_courses.course_count = 1;
Empty set (0.01 sec)






